
@{
    ViewData["Title"] = "الغياب";

    DateTime firstMonthDay = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
    DateTime lastMonthDay = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddMonths(1).AddDays(-1);
}

<div class="d-print-none">
    <form>
        <div class="form-row">
            <div class="form-group col-md-2">
                <label for="startDate" class="control-label"> من تاريخ :</label>
                <br />
                <kendo-datepicker class="form-control" min="new DateTime(2018,12,1)" name="startDate" id="startDate" value="firstMonthDay" format="yyyy-MM-dd" title="عرض من تاريخ" />
            </div>
            <div class="form-group col-md-2">
                <label for="endDate" class="control-label"> إلى تاريخ :</label>
                <br />
                <kendo-datepicker class="form-control" min="new DateTime(2018,12,1)" name="endDate" id="endDate" value="lastMonthDay" format="yyyy-MM-dd" title="عرض الى تاريخ" />
            </div>
            <div class="form-group col-md-4">
                <label for="employees" class="control-label"> الموظفين :</label>
                <br />
                @(Html.Kendo().MultiSelect()
                                        .Name("employees")
                                        .Placeholder("تحديد الموظفين ...")
                                        .HtmlAttributes(new { style = "100%" })
                                        .DataTextField("EmployeeId")
                                        .DataValueField("EmployeeId")
                                        .AutoClose(true)
                                        .AutoBind(false)
                                        .MinLength(3)
                                        .Events(e => e.Change("onChange"))
                                        .ItemTemplate("<span style=\"color:red\">#= EmployeeId #</span>&nbsp;-&nbsp; #= Name #")
                                .DataSource(source =>
                                {
                                    source
                                    .Custom()
                                    .Group(g => g.Add("DepartmentName", typeof(string)))
                                    .Transport(transport =>
                                        transport.Read(read =>
                                        {
                                            read.Action("ShortEmployeesInfoForKendo", "Employees");
                                        })).Schema(schema =>
                  {
                      schema.Data("Data") 
                            .Total("Total"); 
                  })

                                    .ServerFiltering(false);
                                }))
            </div>
            <div class="form-group col-md-2">
                <label for="reportType" class="control-label"> نوع التقرير :</label>
                <br />
                <div class="btn-group btn-group-toggle" data-toggle="buttons" style="direction:ltr">
                    <label class="btn btn-outline-info">
                        <input type="radio" name="reportType" id="detailsReport" autocomplete="off" value="details"> تفصيلي
                    </label>
                    <label class="btn btn-outline-info active">
                        <input type="radio" name="reportType" id="summaryReport" autocomplete="off" value="summary" checked> مختصر
                    </label>
                </div>
            </div>
            <div class="form-group col-md-2">
                <label for="showAbsents" class="control-label">&nbsp;</label>
                <br />
                <button type="submit" id="showAbsents" class="btn btn-info btn-block"> عرض <i class="fas fa-search"></i> </button>
            </div>
        </div>
    </form>
</div>

<div id="absentsData">
    <hr />
    <p id="report" class="lead" style="text-align:center;margin-top:150px;font-style:italic;color:gray"> .... تقرير الغياب .... </p>
</div>

@section scripts{
    <partial name="_ValidationScripts">
        <script>

            function readEmployees() {
                return {
                    employeeId: $("#employees").val()
                }
            }

            function onChange() {
                var x = $("#employees").val();
                alert(x);
            }

        $(function () {

              $('form').submit(function (e) {
                if ($(this).valid()) {

                    var options = {
                    url: "@Url.Action("AbsentsReport", "EmployeesDaysReports")",
                    type: "Post",
                 dataType: "html",
                    data: { startDate: $("#startDate").val(), endDate: $("#endDate").val() },
                    success: function updateBalances(data) {
                        $("#absentsData").html(data);
                        $("#absentsData").fadeIn();
                    },
                 error: function () {
                     $("#absentsData").text("error");
                     $("#absentsData").fadeIn();
                        },
                 beforeSend: function () {
                            $("#report").html("<div class='spinner-grow text-info' role='status'>< span class='sr-only'> Loading...</span ></div>'");
                        }
                };

                $.ajax(options);

                }

                e.preventDefault();
            });

            toastr.clear();

        })

        </script>

}

